Unity Editor version:    2020.3.32f1 (12f8b0834f07)
Branch:                  2020.3/staging
Build type:              Release
Batch mode:              YES
macOS version:           Version 10.13.6 (Build 17G14042)
Darwin version:          17.7.0
Architecture:            x86_64
Running under Rosetta:   NO
Available memory:        10240 MB
Using pre-set license
Pro License: NO

COMMAND LINE ARGUMENTS:
/Applications/Unity/Hub/Editor/2020.3.32f1/Unity.app/Contents/MacOS/Unity
-adb2
-batchMode
-noUpm
-name
AssetImportWorker0
-projectPath
/Users/admin/Desktop/vrProject/VR/vrProject
-logFile
Logs/AssetImportWorker0.log
-srvPort
58598
Successfully changed project path to: /Users/admin/Desktop/vrProject/VR/vrProject
/Users/admin/Desktop/vrProject/VR/vrProject
Using Asset Import Pipeline V2.
Refreshing native plugins compatible for Editor in 228.75 ms, found 4 plugins.
Preloading 1 native plugins for Editor in 14.50 ms.
Initialize engine version: 2020.3.32f1 (12f8b0834f07)
[Subsystems] Discovering subsystems at path /Applications/Unity/Hub/Editor/2020.3.32f1/Unity.app/Contents/Resources/UnitySubsystems
[Subsystems] Discovering subsystems at path /Users/admin/Desktop/vrProject/VR/vrProject/Assets
GfxDevice: creating device client; threaded=0
Renderer: ATI Radeon HD 4850 OpenGL Engine
Vendor:   ATI Technologies Inc.
Version:  3.3 ATI-10.4.14
GLES:     0
 GL_ARB_blend_func_extended GL_ARB_draw_buffers_blend GL_ARB_ES2_compatibility GL_ARB_explicit_attrib_location GL_ARB_instanced_arrays GL_ARB_internalformat_query GL_ARB_occlusion_query2 GL_ARB_sampler_objects GL_ARB_separate_shader_objects GL_ARB_shader_bit_encoding GL_ARB_shading_language_include GL_ARB_texture_buffer_object_rgb32 GL_ARB_texture_rgb10_a2ui GL_ARB_texture_storage GL_ARB_texture_swizzle GL_ARB_timer_query GL_ARB_vertex_type_2_10_10_10_rev GL_EXT_debug_label GL_EXT_debug_marker GL_EXT_texture_compression_s3tc GL_EXT_texture_filter_anisotropic GL_EXT_texture_mirror_clamp GL_EXT_texture_sRGB_decode GL_APPLE_client_storage GL_APPLE_container_object_shareable GL_APPLE_flush_render GL_APPLE_object_purgeable GL_APPLE_rgb_422 GL_APPLE_row_bytes GL_APPLE_texture_range GL_ATI_texture_mirror_once GL_NV_texture_barrier
OPENGL LOG: Creating OpenGL 3.3 graphics device ; Context level  <OpenGL 3.3> ; Context handle -2071652352
Initialize mono
Mono path[0] = '/Applications/Unity/Hub/Editor/2020.3.32f1/Unity.app/Contents/Managed'
Mono path[1] = '/Applications/Unity/Hub/Editor/2020.3.32f1/Unity.app/Contents/MonoBleedingEdge/lib/mono/unityjit'
Mono config path = '/Applications/Unity/Hub/Editor/2020.3.32f1/Unity.app/Contents/MonoBleedingEdge/etc'
Using monoOptions --debugger-agent=transport=dt_socket,embedding=1,server=y,suspend=n,address=127.0.0.1:56515
Begin MonoManager ReloadAssembly
Registering precompiled unity dll's ...
Register platform support module: /Applications/Unity/Hub/Editor/2020.3.32f1/PlaybackEngines/WebGLSupport/UnityEditor.WebGL.Extensions.dll
Register platform support module: /Applications/Unity/Hub/Editor/2020.3.32f1/Unity.app/Contents/PlaybackEngines/MacStandaloneSupport/UnityEditor.OSXStandalone.Extensions.dll
Register platform support module: /Applications/Unity/Hub/Editor/2020.3.32f1/PlaybackEngines/WindowsStandaloneSupport/UnityEditor.WindowsStandalone.Extensions.dll
Registered in 0.005138 seconds.
Native extension for WindowsStandalone target not found
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Refreshing native plugins compatible for Editor in 142.13 ms, found 4 plugins.
Preloading 1 native plugins for Editor in 0.76 ms.
Mono: successfully reloaded assembly
- Completed reload, in  1.370 seconds
Domain Reload Profiling:
	ReloadAssembly (1370ms)
		BeginReloadAssembly (231ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (0ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (2ms)
		EndReloadAssembly (999ms)
			LoadAssemblies (239ms)
			RebuildTransferFunctionScriptingTraits (0ms)
			SetupTypeCache (314ms)
			ReleaseScriptCaches (0ms)
			RebuildScriptCaches (68ms)
			SetupLoadedEditorAssemblies (449ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (9ms)
				SetLoadedEditorAssemblies (0ms)
				RefreshPlugins (143ms)
				BeforeProcessingInitializeOnLoad (66ms)
				ProcessInitializeOnLoadAttributes (175ms)
				ProcessInitializeOnLoadMethodAttributes (55ms)
				AfterProcessingInitializeOnLoad (0ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (0ms)
Platform modules already initialized, skipping
Registering precompiled user dll's ...
Registered in 0.037730 seconds.
Begin MonoManager ReloadAssembly
Native extension for WindowsStandalone target not found
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Refreshing native plugins compatible for Editor in 149.67 ms, found 4 plugins.
Preloading 1 native plugins for Editor in 0.86 ms.
Mono: successfully reloaded assembly
- Completed reload, in  2.807 seconds
Domain Reload Profiling:
	ReloadAssembly (2827ms)
		BeginReloadAssembly (375ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (8ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (50ms)
		EndReloadAssembly (2339ms)
			LoadAssemblies (405ms)
			RebuildTransferFunctionScriptingTraits (0ms)
			SetupTypeCache (753ms)
			ReleaseScriptCaches (1ms)
			RebuildScriptCaches (134ms)
			SetupLoadedEditorAssemblies (882ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (7ms)
				SetLoadedEditorAssemblies (0ms)
				RefreshPlugins (151ms)
				BeforeProcessingInitializeOnLoad (198ms)
				ProcessInitializeOnLoadAttributes (504ms)
				ProcessInitializeOnLoadMethodAttributes (19ms)
				AfterProcessingInitializeOnLoad (2ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (12ms)
Platform modules already initialized, skipping
Validating Project structure ... 0.044449 seconds.
Shader import version has changed; will reimport all shaders...
Upgrading shader files ...0.010860 seconds.
Application.AssetDatabase Initial Script Refresh Start
RefreshInfo: InitialScriptRefreshV2(NoUpdateAssetOptions) scanfilter:  ... 1 filters
RefreshProfiler: Total: 0.000ms
Application.AssetDatabase Initial Script Refresh End
Application.AssetDatabase.Refresh Start
Application.AssetDatabase.Refresh End
RefreshInfo: StopAssetImportingV2(ForceSynchronousImport) scanfilter: 
RefreshProfiler: Total: 0.000ms
Launching external process: /Applications/Unity/Hub/Editor/2020.3.32f1/Unity.app/Contents/Tools/UnityShaderCompiler
Launched and connected shader compiler UnityShaderCompiler after 0.03 seconds
-------- Shader Sprites/Default compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 _RendererColor;
uniform 	vec2 _Flip;
uniform 	vec4 _Color;
UNITY_BINDING(0) uniform UnityStereoGlobals {
	vec4 hlslcc_mtx4x4unity_StereoMatrixP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixVP[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraInvProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoWorldToCamera[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraToWorld[8];
	vec3 unity_StereoWorldSpaceCameraPos[2];
	vec4 unity_StereoScaleOffset[2];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
flat out uint vs_BLENDINDICES0;
vec4 u_xlat0;
vec4 u_xlat1;
uint u_xlatu1;
vec4 u_xlat2;
int u_xlati4;
void main()
{
    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlatu1 = uint(gl_InstanceID) & 1u;
    u_xlati4 = int(u_xlatu1) << 2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 1)];
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[u_xlati4] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 2)] * u_xlat0.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 3)] * u_xlat0.wwww + u_xlat2;
    u_xlat0 = in_COLOR0 * _Color;
    vs_COLOR0 = u_xlat0 * _RendererColor;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_BLENDINDICES0 = u_xlatu1;
    gl_Layer = int(u_xlatu1);
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Sprites/Default:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Sprites/Default' failed.
-------- Shader Skybox/Procedural compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 _LightColor0;
uniform 	float _Exposure;
uniform 	vec3 _GroundColor;
uniform 	vec3 _SkyTint;
uniform 	float _AtmosphereThickness;
UNITY_BINDING(0) uniform UnityStereoGlobals {
	vec4 hlslcc_mtx4x4unity_StereoMatrixP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixVP[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraInvProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoWorldToCamera[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraToWorld[8];
	vec3 unity_StereoWorldSpaceCameraPos[2];
	vec4 unity_StereoScaleOffset[2];
};
in  vec4 in_POSITION0;
out vec3 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
flat out uint vs_BLENDINDICES0;
uint u_xlatu0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
int u_xlati7;
float u_xlat8;
vec3 u_xlat9;
float u_xlat15;
vec2 u_xlat16;
float u_xlat22;
float u_xlat23;
float u_xlat24;
void main()
{
    u_xlatu0 = uint(gl_InstanceID) & 1u;
    u_xlati7 = int(u_xlatu0) << 2;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati7 + 1)];
    u_xlat3 = hlslcc_mtx4x4unity_StereoMatrixVP[u_xlati7] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati7 + 2)] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati7 + 3)] * u_xlat2.wwww + u_xlat3;
    u_xlat2 = log2(vec4(_SkyTint.x, _SkyTint.y, _SkyTint.z, _AtmosphereThickness));
    u_xlat2 = u_xlat2 * vec4(0.454545468, 0.454545468, 0.454545468, 2.5);
    u_xlat2 = exp2(u_xlat2);
    u_xlat7.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat7.xyz;
    u_xlat7.xyz = vec3(1.0, 1.0, 1.0) / u_xlat7.xyz;
    u_xlat2.xy = u_xlat2.ww * vec2(0.049999997, 0.0314159282);
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat1.xyz;
    u_xlatb1 = u_xlat3.y>=0.0;
    if(u_xlatb1){
        u_xlat1.x = u_xlat3.y * u_xlat3.y + 0.0506249666;
        u_xlat1.x = sqrt(u_xlat1.x);
        u_xlat1.x = (-u_xlat1.y) * u_xlat22 + u_xlat1.x;
        u_xlat8 = (-u_xlat3.y) * 1.0 + 1.0;
        u_xlat15 = u_xlat8 * 5.25 + -6.80000019;
        u_xlat15 = u_xlat8 * u_xlat15 + 3.82999992;
        u_xlat15 = u_xlat8 * u_xlat15 + 0.458999991;
        u_xlat8 = u_xlat8 * u_xlat15 + -0.00286999997;
        u_xlat8 = u_xlat8 * 1.44269502;
        u_xlat1.y = exp2(u_xlat8);
        u_xlat1.xyz = u_xlat1.xyx * vec3(0.5, 0.246031836, 20.0);
        u_xlat4.xyz = u_xlat1.xxx * u_xlat3.xyz;
        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);
        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat22 = sqrt(u_xlat22);
        u_xlat16.x = (-u_xlat22) + 1.0;
        u_xlat16.x = u_xlat16.x * 230.831207;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat23 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
        u_xlat23 = u_xlat23 / u_xlat22;
        u_xlat24 = dot(u_xlat3.xyz, u_xlat4.xyz);
        u_xlat22 = u_xlat24 / u_xlat22;
        u_xlat23 = (-u_xlat23) + 1.0;
        u_xlat24 = u_xlat23 * 5.25 + -6.80000019;
        u_xlat24 = u_xlat23 * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat23 * u_xlat24 + 0.458999991;
        u_xlat23 = u_xlat23 * u_xlat24 + -0.00286999997;
        u_xlat23 = u_xlat23 * 1.44269502;
        u_xlat23 = exp2(u_xlat23);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat24 = u_xlat22 * 5.25 + -6.80000019;
        u_xlat24 = u_xlat22 * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat22 * u_xlat24 + 0.458999991;
        u_xlat22 = u_xlat22 * u_xlat24 + -0.00286999997;
        u_xlat22 = u_xlat22 * 1.44269502;
        u_xlat22 = exp2(u_xlat22);
        u_xlat22 = u_xlat22 * 0.25;
        u_xlat22 = u_xlat23 * 0.25 + (-u_xlat22);
        u_xlat22 = u_xlat16.x * u_xlat22 + u_xlat1.y;
        u_xlat22 = max(u_xlat22, 0.0);
        u_xlat22 = min(u_xlat22, 50.0);
        u_xlat5.xyz = u_xlat7.xyz * u_xlat2.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);
        u_xlat6.xyz = (-vec3(u_xlat22)) * u_xlat5.xyz;
        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
        u_xlat6.xyz = exp2(u_xlat6.xyz);
        u_xlat22 = u_xlat1.z * u_xlat16.x;
        u_xlat4.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat4.xyz;
        u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat1.x = sqrt(u_xlat1.x);
        u_xlat16.x = (-u_xlat1.x) + 1.0;
        u_xlat16.x = u_xlat16.x * 230.831207;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat23 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
        u_xlat23 = u_xlat23 / u_xlat1.x;
        u_xlat24 = dot(u_xlat3.xyz, u_xlat4.xyz);
        u_xlat1.x = u_xlat24 / u_xlat1.x;
        u_xlat23 = (-u_xlat23) + 1.0;
        u_xlat24 = u_xlat23 * 5.25 + -6.80000019;
        u_xlat24 = u_xlat23 * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat23 * u_xlat24 + 0.458999991;
        u_xlat23 = u_xlat23 * u_xlat24 + -0.00286999997;
        u_xlat23 = u_xlat23 * 1.44269502;
        u_xlat23 = exp2(u_xlat23);
        u_xlat1.x = (-u_xlat1.x) + 1.0;
        u_xlat24 = u_xlat1.x * 5.25 + -6.80000019;
        u_xlat24 = u_xlat1.x * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat1.x * u_xlat24 + 0.458999991;
        u_xlat1.x = u_xlat1.x * u_xlat24 + -0.00286999997;
        u_xlat1.x = u_xlat1.x * 1.44269502;
        u_xlat1.x = exp2(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * 0.25;
        u_xlat1.x = u_xlat23 * 0.25 + (-u_xlat1.x);
        u_xlat1.x = u_xlat16.x * u_xlat1.x + u_xlat1.y;
        u_xlat1.x = max(u_xlat1.x, 0.0);
        u_xlat1.x = min(u_xlat1.x, 50.0);
        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat1.xxx);
        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
        u_xlat4.xyz = exp2(u_xlat4.xyz);
        u_xlat1.x = u_xlat1.z * u_xlat16.x;
        u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
        u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat1.xyz;
        u_xlat4.xyz = u_xlat7.xyz * u_xlat2.xxx;
        u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz;
        u_xlat1.xyz = u_xlat1.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);
    } else {
        u_xlat22 = min(u_xlat3.y, -0.00100000005);
        u_xlat22 = -9.99999975e-05 / u_xlat22;
        u_xlat5.xyz = vec3(u_xlat22) * u_xlat3.xyz + vec3(0.0, 1.00010002, 0.0);
        u_xlat16.x = dot((-u_xlat3.xyz), u_xlat5.xyz);
        u_xlat16.y = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
        u_xlat16.xy = (-u_xlat16.xy) + vec2(1.0, 1.0);
        u_xlat24 = u_xlat16.x * 5.25 + -6.80000019;
        u_xlat24 = u_xlat16.x * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat16.x * u_xlat24 + 0.458999991;
        u_xlat16.x = u_xlat16.x * u_xlat24 + -0.00286999997;
        u_xlat16.x = u_xlat16.x * 1.44269502;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat24 = u_xlat16.y * 5.25 + -6.80000019;
        u_xlat24 = u_xlat16.y * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat16.y * u_xlat24 + 0.458999991;
        u_xlat23 = u_xlat16.y * u_xlat24 + -0.00286999997;
        u_xlat23 = u_xlat23 * 1.44269502;
        u_xlat23 = exp2(u_xlat23);
        u_xlat5.xy = u_xlat16.xx * vec2(0.25, 0.249900013);
        u_xlat16.x = u_xlat23 * 0.25 + u_xlat5.x;
        u_xlat5.xz = vec2(u_xlat22) * vec2(0.5, 20.0);
        u_xlat6.xyz = u_xlat3.xyz * u_xlat5.xxx;
        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);
        u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat22 = sqrt(u_xlat22);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat22 = u_xlat22 * 230.831207;
        u_xlat22 = exp2(u_xlat22);
        u_xlat16.x = u_xlat22 * u_xlat16.x + (-u_xlat5.y);
        u_xlat16.x = max(u_xlat16.x, 0.0);
        u_xlat16.x = min(u_xlat16.x, 50.0);
        u_xlat5.xyw = u_xlat7.xyz * u_xlat2.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);
        u_xlat9.xyz = (-u_xlat16.xxx) * u_xlat5.xyw;
        u_xlat9.xyz = u_xlat9.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
        u_xlat1.xyz = exp2(u_xlat9.xyz);
        u_xlat22 = u_xlat5.z * u_xlat22;
        u_xlat9.xyz = vec3(u_xlat22) * u_xlat1.xyz;
        u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);
        u_xlat4.xyz = u_xlat7.xyz * u_xlat9.xyz;
    }
    u_xlat7.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * u_xlat1.xyz + u_xlat4.xyz;
    vs_TEXCOORD1.xyz = u_xlat7.xyz * vec3(_Exposure);
    u_xlat7.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat3.xyz));
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * 0.75 + 0.75;
    u_xlat7.xyz = u_xlat7.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.xyz = u_xlat7.xyz * vec3(_Exposure);
    u_xlat7.x = dot(_LightColor0.xyz, _LightColor0.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.25);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(8000.0, 8000.0, 8000.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(27.0, 27.0, 27.0);
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat7.xxx;
    vs_TEXCOORD0.xyz = (-u_xlat3.xyz);
    vs_BLENDINDICES0 = u_xlatu0;
    gl_Layer = int(u_xlatu0);
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Skybox/Procedural:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Skybox/Procedural' failed.
-------- Shader Legacy Shaders/Particles/Additive compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _MainTex_ST;
UNITY_BINDING(0) uniform UnityStereoGlobals {
	vec4 hlslcc_mtx4x4unity_StereoMatrixP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixVP[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraInvProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoWorldToCamera[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraToWorld[8];
	vec3 unity_StereoWorldSpaceCameraPos[2];
	vec4 unity_StereoScaleOffset[2];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
out float vs_TEXCOORD1;
flat out uint vs_BLENDINDICES0;
vec4 u_xlat0;
uint u_xlatu1;
vec4 u_xlat2;
int u_xlati4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlatu1 = uint(gl_InstanceID) & 1u;
    u_xlati4 = int(u_xlatu1) << 2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 1)];
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[u_xlati4] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 2)] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 3)] * u_xlat0.wwww + u_xlat2;
    gl_Position = u_xlat0;
    u_xlat0.x = u_xlat0.z * unity_FogParams.x;
    u_xlat0.x = u_xlat0.x * (-u_xlat0.x);
    vs_TEXCOORD1 = exp2(u_xlat0.x);
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_BLENDINDICES0 = u_xlatu1;
    gl_Layer = int(u_xlatu1);
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Legacy Shaders/Particles/Additive:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Legacy Shaders/Particles/Additive' failed.
-------- Shader Legacy Shaders/Particles/Alpha Blended Premultiply compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 _MainTex_ST;
UNITY_BINDING(0) uniform UnityStereoGlobals {
	vec4 hlslcc_mtx4x4unity_StereoMatrixP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixVP[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraInvProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoWorldToCamera[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraToWorld[8];
	vec3 unity_StereoWorldSpaceCameraPos[2];
	vec4 unity_StereoScaleOffset[2];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
flat out uint vs_BLENDINDICES0;
vec4 u_xlat0;
uint u_xlatu1;
vec4 u_xlat2;
int u_xlati4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlatu1 = uint(gl_InstanceID) & 1u;
    u_xlati4 = int(u_xlatu1) << 2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 1)];
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[u_xlati4] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 2)] * u_xlat0.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 3)] * u_xlat0.wwww + u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_BLENDINDICES0 = u_xlatu1;
    gl_Layer = int(u_xlatu1);
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Legacy Shaders/Particles/Alpha Blended Premultiply:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Legacy Shaders/Particles/Alpha Blended Premultiply' failed.
-------- Shader Hidden/Universal Render Pipeline/Blit compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScaleBias;
out vec2 vs_TEXCOORD0;
flat out uint vs_BLENDINDICES0;
int u_xlati0;
uvec2 u_xlatu0;
vec3 u_xlat1;
int u_xlati4;
void main()
{
    u_xlati0 = int(uint(gl_VertexID) & 1u);
    u_xlatu0.y = uint(gl_VertexID) >> 1u;
    u_xlati4 = (-u_xlati0) + (-int(u_xlatu0.y));
    u_xlati0 = u_xlati0 + int(u_xlatu0.y);
    u_xlatu0.x = uint(u_xlati0) & 1u;
    u_xlat1.xz = vec2(u_xlatu0.yx);
    vs_TEXCOORD0.xy = u_xlat1.xz * _ScaleBias.xy + _ScaleBias.zw;
    u_xlati0 = u_xlati4 + 1;
    u_xlatu0.x = uint(u_xlati0) & 1u;
    u_xlat1.y = float(u_xlatu0.x);
    gl_Position.xy = u_xlat1.xy * vec2(2.0, -2.0) + vec2(-1.0, 1.0);
    gl_Position.zw = vec2(-1.0, 1.0);
    u_xlatu0.x = uint(gl_InstanceID) & 1u;
    gl_Layer = int(u_xlatu0.x);
    vs_BLENDINDICES0 = u_xlatu0.x;
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Hidden/Universal Render Pipeline/Blit:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Hidden/Universal Render Pipeline/Blit' failed.
-------- Shader Hidden/Universal Render Pipeline/CopyDepth compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScaleBiasRt;
out vec2 vs_TEXCOORD0;
flat out uint vs_BLENDINDICES0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
vec3 u_xlat1;
int u_xlati4;
void main()
{
    u_xlati0 = int(uint(gl_VertexID) & 1u);
    u_xlatu0.y = uint(gl_VertexID) >> 1u;
    u_xlati4 = (-u_xlati0) + (-int(u_xlatu0.y));
    u_xlati0 = u_xlati0 + int(u_xlatu0.y);
    u_xlatu0.x = uint(u_xlati0) & 1u;
    u_xlat1.xz = vec2(u_xlatu0.yx);
    vs_TEXCOORD0.xy = u_xlat1.xz;
    u_xlati0 = u_xlati4 + 1;
    u_xlatu0.x = uint(u_xlati0) & 1u;
    u_xlat1.y = float(u_xlatu0.x);
    u_xlat0.xy = u_xlat1.xy * vec2(2.0, -2.0) + vec2(-1.0, 1.0);
    gl_Position.y = u_xlat0.y * _ScaleBiasRt.x;
    gl_Position.x = u_xlat0.x;
    gl_Position.zw = vec2(-1.0, 1.0);
    u_xlatu0.x = uint(gl_InstanceID) & 1u;
    gl_Layer = int(u_xlatu0.x);
    vs_BLENDINDICES0 = u_xlatu0.x;
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Hidden/Universal Render Pipeline/CopyDepth:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Hidden/Universal Render Pipeline/CopyDepth' failed.
-------- Shader Hidden/TerrainEngine/Details/UniversalPipeline/WavingDoublePass compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_FogParams;
UNITY_BINDING(1) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
};
UNITY_BINDING(2) uniform UnityStereoViewBuffer {
	vec4 hlslcc_mtx4x4unity_StereoMatrixP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixVP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvVP[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraInvProjection[8];
	vec3 unity_StereoWorldSpaceCameraPos[2];
	vec4 unity_StereoScaleOffset[2];
};
UNITY_BINDING(5) uniform TerrainGrass {
	vec4 _WavingTint;
	vec4 _WaveAndDistance;
	vec4 _CameraPosition;
	vec3 _CameraRight;
	vec3 _CameraUp;
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD7;
flat out uint vs_SV_InstanceID0;
flat out uint vs_BLENDINDICES0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
uint u_xlatu13;
float u_xlat14;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = max(u_xlat12, 1.17549435e-38);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    vs_TEXCOORD1.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0 = _WaveAndDistance.yyyy * vec4(0.00600000005, 0.0199999996, 0.0199999996, 0.0500000007);
    u_xlat0 = u_xlat0 * in_POSITION0.zzzz;
    u_xlat1 = _WaveAndDistance.yyyy * vec4(0.0120000001, 0.0199999996, 0.0599999987, 0.0240000002);
    u_xlat0 = in_POSITION0.xxxx * u_xlat1 + u_xlat0;
    u_xlat0 = _WaveAndDistance.xxxx * vec4(1.20000005, 2.0, 1.60000002, 4.80000019) + u_xlat0;
    u_xlat0 = fract(u_xlat0);
    u_xlat0 = u_xlat0 * vec4(6.40884876, 6.40884876, 6.40884876, 6.40884876) + vec4(-3.14159274, -3.14159274, -3.14159274, -3.14159274);
    u_xlat1 = u_xlat0 * u_xlat0;
    u_xlat2 = u_xlat0 * u_xlat1;
    u_xlat0 = u_xlat2 * vec4(-0.161616161, -0.161616161, -0.161616161, -0.161616161) + u_xlat0;
    u_xlat2 = u_xlat1 * u_xlat2;
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat0 = u_xlat2 * vec4(0.00833330024, 0.00833330024, 0.00833330024, 0.00833330024) + u_xlat0;
    u_xlat0 = u_xlat1 * vec4(-0.000198409994, -0.000198409994, -0.000198409994, -0.000198409994) + u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat1.x = in_COLOR0.w * _WaveAndDistance.z;
    u_xlat1 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.x = dot(u_xlat0, vec4(0.674199879, 0.674199879, 0.269679934, 0.134839967));
    u_xlat0.x = u_xlat0.x * 0.699999988;
    u_xlat2.x = dot(u_xlat1, vec4(0.0240000002, 0.0399999991, -0.119999997, 0.0960000008));
    u_xlat2.z = dot(u_xlat1, vec4(0.00600000005, 0.0199999996, -0.0199999996, 0.100000001));
    u_xlat1.xz = (-u_xlat2.xz) * _WaveAndDistance.zz + in_POSITION0.xz;
    u_xlat4.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    vs_TEXCOORD2.xyz = u_xlat4.xyz;
    vs_TEXCOORD2.w = 32.0;
    u_xlatu13 = uint(gl_InstanceID) & 1u;
    u_xlat2.xyz = (-u_xlat4.xyz) + unity_StereoWorldSpaceCameraPos[int(u_xlatu13)].xyz;
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = max(u_xlat14, 1.17549435e-38);
    u_xlat14 = inversesqrt(u_xlat14);
    vs_TEXCOORD4.xyz = vec3(u_xlat14) * u_xlat2.xyz;
    u_xlati2 = int(u_xlatu13) << 2;
    u_xlat3 = u_xlat4.yyyy * hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati2 + 1)];
    u_xlat3 = hlslcc_mtx4x4unity_StereoMatrixVP[u_xlati2] * u_xlat4.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati2 + 2)] * u_xlat4.zzzz + u_xlat3;
    u_xlat2 = u_xlat3 + hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati2 + 3)];
    vs_TEXCOORD5.x = u_xlat2.z * unity_FogParams.x;
    gl_Position = u_xlat2;
    vs_TEXCOORD5.yzw = vec3(0.0, 0.0, 0.0);
    u_xlat1.y = in_POSITION0.y;
    u_xlat4.xyz = u_xlat1.xyz + (-_CameraPosition.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = (-u_xlat4.x) + _WaveAndDistance.w;
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    vs_TEXCOORD7.w = u_xlat4.x * _CameraPosition.w;
    vs_TEXCOORD7.w = clamp(vs_TEXCOORD7.w, 0.0, 1.0);
    u_xlat4.xyz = _WavingTint.xyz + vec3(-0.5, -0.5, -0.5);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + vec3(0.5, 0.5, 0.5);
    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;
    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat0.xyz;
    vs_SV_InstanceID0 =  uint(gl_InstanceID);
    gl_Layer = int(u_xlatu13);
    vs_BLENDINDICES0 = u_xlatu13;
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Hidden/TerrainEngine/Details/UniversalPipeline/WavingDoublePass:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Hidden/TerrainEngine/Details/UniversalPipeline/WavingDoublePass' failed.
-------- Shader Universal Render Pipeline/Terrain/Lit compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_OrthoParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityStereoViewBuffer {
	vec4 hlslcc_mtx4x4unity_StereoMatrixP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixVP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvVP[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraInvProjection[8];
	vec3 unity_StereoWorldSpaceCameraPos[2];
	vec4 unity_StereoScaleOffset[2];
};
UNITY_BINDING(2) uniform _Terrain {
	float _NormalScale0;
	float _NormalScale1;
	float _NormalScale2;
	float _NormalScale3;
	float _Metallic0;
	float _Metallic1;
	float _Metallic2;
	float _Metallic3;
	float _Smoothness0;
	float _Smoothness1;
	float _Smoothness2;
	float _Smoothness3;
	vec4 _DiffuseRemapScale0;
	vec4 _DiffuseRemapScale1;
	vec4 _DiffuseRemapScale2;
	vec4 _DiffuseRemapScale3;
	vec4 _MaskMapRemapOffset0;
	vec4 _MaskMapRemapOffset1;
	vec4 _MaskMapRemapOffset2;
	vec4 _MaskMapRemapOffset3;
	vec4 _MaskMapRemapScale0;
	vec4 _MaskMapRemapScale1;
	vec4 _MaskMapRemapScale2;
	vec4 _MaskMapRemapScale3;
	vec4 _Control_ST;
	vec4 _Control_TexelSize;
	float _DiffuseHasAlpha0;
	float _DiffuseHasAlpha1;
	float _DiffuseHasAlpha2;
	float _DiffuseHasAlpha3;
	float _LayerHasMask0;
	float _LayerHasMask1;
	float _LayerHasMask2;
	float _LayerHasMask3;
	vec4 _Splat0_ST;
	vec4 _Splat1_ST;
	vec4 _Splat2_ST;
	vec4 _Splat3_ST;
	float _HeightTransition;
	float _NumLayersCount;
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
flat out uint vs_BLENDINDICES0;
uint u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb6;
float u_xlat16;
void main()
{
    u_xlatu0 = uint(gl_InstanceID) & 1u;
    u_xlat5.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlati1 = int(u_xlatu0) << 2;
    u_xlat2 = u_xlat5.yyyy * hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati1 + 1)];
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[u_xlati1] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat5.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati1 + 3)];
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD2.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlatb6 = unity_OrthoParams.w==0.0;
    if(u_xlatb6){
        vs_TEXCOORD4.xyz = (-u_xlat5.xyz) + unity_StereoWorldSpaceCameraPos[int(u_xlatu0)].xyz;
    } else {
        vs_TEXCOORD4.x = hlslcc_mtx4x4unity_StereoMatrixV[u_xlati1].z;
        vs_TEXCOORD4.y = hlslcc_mtx4x4unity_StereoMatrixV[(u_xlati1 + 1)].z;
        vs_TEXCOORD4.z = hlslcc_mtx4x4unity_StereoMatrixV[(u_xlati1 + 2)].z;
    }
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = max(u_xlat16, 1.17549435e-38);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat1);
    u_xlat2.y = dot(unity_SHAg, u_xlat1);
    u_xlat2.z = dot(unity_SHAb, u_xlat1);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat16 = u_xlat1.y * u_xlat1.y;
    u_xlat16 = u_xlat1.x * u_xlat1.x + (-u_xlat16);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat16) + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat5.xyz;
    gl_Layer = int(u_xlatu0);
    vs_BLENDINDICES0 = u_xlatu0;
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Universal Render Pipeline/Terrain/Lit:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Universal Render Pipeline/Terrain/Lit' failed.
-------- Shader Hidden/Universal Render Pipeline/Terrain/Lit (Add Pass) compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_FogParams;
UNITY_BINDING(1) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
};
UNITY_BINDING(2) uniform UnityStereoViewBuffer {
	vec4 hlslcc_mtx4x4unity_StereoMatrixP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixVP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvVP[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraInvProjection[8];
	vec3 unity_StereoWorldSpaceCameraPos[2];
	vec4 unity_StereoScaleOffset[2];
};
UNITY_BINDING(3) uniform _Terrain {
	float _NormalScale0;
	float _NormalScale1;
	float _NormalScale2;
	float _NormalScale3;
	float _Metallic0;
	float _Metallic1;
	float _Metallic2;
	float _Metallic3;
	float _Smoothness0;
	float _Smoothness1;
	float _Smoothness2;
	float _Smoothness3;
	vec4 _DiffuseRemapScale0;
	vec4 _DiffuseRemapScale1;
	vec4 _DiffuseRemapScale2;
	vec4 _DiffuseRemapScale3;
	vec4 _MaskMapRemapOffset0;
	vec4 _MaskMapRemapOffset1;
	vec4 _MaskMapRemapOffset2;
	vec4 _MaskMapRemapOffset3;
	vec4 _MaskMapRemapScale0;
	vec4 _MaskMapRemapScale1;
	vec4 _MaskMapRemapScale2;
	vec4 _MaskMapRemapScale3;
	vec4 _Control_ST;
	vec4 _Control_TexelSize;
	float _DiffuseHasAlpha0;
	float _DiffuseHasAlpha1;
	float _DiffuseHasAlpha2;
	float _DiffuseHasAlpha3;
	float _LayerHasMask0;
	float _LayerHasMask1;
	float _LayerHasMask2;
	float _LayerHasMask3;
	vec4 _Splat0_ST;
	vec4 _Splat1_ST;
	vec4 _Splat2_ST;
	vec4 _Splat3_ST;
	float _HeightTransition;
	float _NumLayersCount;
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
flat out uint vs_BLENDINDICES0;
uint u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
bool u_xlatb8;
float u_xlat15;
bool u_xlatb15;
float u_xlat22;
void main()
{
    u_xlatu0 = uint(gl_InstanceID) & 1u;
    u_xlat7.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat7.xyz;
    u_xlat7.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlati1 = int(u_xlatu0) << 2;
    u_xlat2 = u_xlat7.yyyy * hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati1 + 1)];
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[u_xlati1] * u_xlat7.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat7.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati1 + 3)];
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD2.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlatb8 = unity_OrthoParams.w==0.0;
    if(u_xlatb8){
        u_xlat3.xyw = (-u_xlat7.xyz) + unity_StereoWorldSpaceCameraPos[int(u_xlatu0)].xyz;
        u_xlat4.w = u_xlat3.x;
        u_xlat5.w = u_xlat3.y;
    } else {
        u_xlat4.w = hlslcc_mtx4x4unity_StereoMatrixV[u_xlati1].z;
        u_xlat5.w = hlslcc_mtx4x4unity_StereoMatrixV[(u_xlati1 + 1)].z;
        u_xlat3.w = hlslcc_mtx4x4unity_StereoMatrixV[(u_xlati1 + 2)].z;
    }
    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0);
    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0) + (-u_xlat1.xy);
    u_xlatb15 = unity_WorldTransformParams.w>=0.0;
    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
    u_xlat6.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat6.xyz;
    u_xlat6.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat6.xyz;
    u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat22 = max(u_xlat22, 1.17549435e-38);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat4.xyz = vec3(u_xlat22) * u_xlat6.xyz;
    u_xlat6.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyw = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat6.xyz;
    u_xlat6.x = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat6.x = max(u_xlat6.x, 1.17549435e-38);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat1.xyw * u_xlat6.xxx;
    u_xlat1.xyw = u_xlat4.zxy * u_xlat5.yzx;
    u_xlat1.xyw = u_xlat4.yzx * u_xlat5.zxy + (-u_xlat1.xyw);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat1.xyw;
    vs_TEXCOORD6.x = u_xlat2.z * unity_FogParams.x;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD3 = u_xlat4;
    vs_TEXCOORD4 = u_xlat5;
    vs_TEXCOORD5 = u_xlat3;
    vs_TEXCOORD6.yzw = vec3(0.0, 0.0, 0.0);
    gl_Position = u_xlat2;
    vs_TEXCOORD7.xyz = u_xlat7.xyz;
    gl_Layer = int(u_xlatu0);
    vs_BLENDINDICES0 = u_xlatu0;
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Hidden/Universal Render Pipeline/Terrain/Lit (Add Pass):
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Hidden/Universal Render Pipeline/Terrain/Lit (Add Pass)' failed.
Initializing Unity extensions:
========================================================================
Worker process is ready to serve import requests
-------- Shader Skybox/Procedural compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 _LightColor0;
uniform 	float _Exposure;
uniform 	vec3 _GroundColor;
uniform 	vec3 _SkyTint;
uniform 	float _AtmosphereThickness;
UNITY_BINDING(0) uniform UnityStereoGlobals {
	vec4 hlslcc_mtx4x4unity_StereoMatrixP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixVP[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraInvProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoWorldToCamera[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraToWorld[8];
	vec3 unity_StereoWorldSpaceCameraPos[2];
	vec4 unity_StereoScaleOffset[2];
};
in  vec4 in_POSITION0;
out vec3 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
flat out uint vs_BLENDINDICES0;
uint u_xlatu0;
vec4 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
int u_xlati7;
float u_xlat8;
vec3 u_xlat9;
float u_xlat15;
vec2 u_xlat16;
float u_xlat22;
float u_xlat23;
float u_xlat24;
void main()
{
    u_xlatu0 = uint(gl_InstanceID) & 1u;
    u_xlati7 = int(u_xlatu0) << 2;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati7 + 1)];
    u_xlat3 = hlslcc_mtx4x4unity_StereoMatrixVP[u_xlati7] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati7 + 2)] * u_xlat2.zzzz + u_xlat3;
    gl_Position = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati7 + 3)] * u_xlat2.wwww + u_xlat3;
    u_xlat2 = log2(vec4(_SkyTint.x, _SkyTint.y, _SkyTint.z, _AtmosphereThickness));
    u_xlat2 = u_xlat2 * vec4(0.454545468, 0.454545468, 0.454545468, 2.5);
    u_xlat2 = exp2(u_xlat2);
    u_xlat7.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat7.xyz = u_xlat7.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat7.xyz * u_xlat7.xyz;
    u_xlat7.xyz = vec3(1.0, 1.0, 1.0) / u_xlat7.xyz;
    u_xlat2.xy = u_xlat2.ww * vec2(0.049999997, 0.0314159282);
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = inversesqrt(u_xlat22);
    u_xlat3.xyz = vec3(u_xlat22) * u_xlat1.xyz;
    u_xlatb1 = u_xlat3.y>=0.0;
    if(u_xlatb1){
        u_xlat1.x = u_xlat3.y * u_xlat3.y + 0.0506249666;
        u_xlat1.x = sqrt(u_xlat1.x);
        u_xlat1.x = (-u_xlat1.y) * u_xlat22 + u_xlat1.x;
        u_xlat8 = (-u_xlat3.y) * 1.0 + 1.0;
        u_xlat15 = u_xlat8 * 5.25 + -6.80000019;
        u_xlat15 = u_xlat8 * u_xlat15 + 3.82999992;
        u_xlat15 = u_xlat8 * u_xlat15 + 0.458999991;
        u_xlat8 = u_xlat8 * u_xlat15 + -0.00286999997;
        u_xlat8 = u_xlat8 * 1.44269502;
        u_xlat1.y = exp2(u_xlat8);
        u_xlat1.xyz = u_xlat1.xyx * vec3(0.5, 0.246031836, 20.0);
        u_xlat4.xyz = u_xlat1.xxx * u_xlat3.xyz;
        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);
        u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat22 = sqrt(u_xlat22);
        u_xlat16.x = (-u_xlat22) + 1.0;
        u_xlat16.x = u_xlat16.x * 230.831207;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat23 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
        u_xlat23 = u_xlat23 / u_xlat22;
        u_xlat24 = dot(u_xlat3.xyz, u_xlat4.xyz);
        u_xlat22 = u_xlat24 / u_xlat22;
        u_xlat23 = (-u_xlat23) + 1.0;
        u_xlat24 = u_xlat23 * 5.25 + -6.80000019;
        u_xlat24 = u_xlat23 * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat23 * u_xlat24 + 0.458999991;
        u_xlat23 = u_xlat23 * u_xlat24 + -0.00286999997;
        u_xlat23 = u_xlat23 * 1.44269502;
        u_xlat23 = exp2(u_xlat23);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat24 = u_xlat22 * 5.25 + -6.80000019;
        u_xlat24 = u_xlat22 * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat22 * u_xlat24 + 0.458999991;
        u_xlat22 = u_xlat22 * u_xlat24 + -0.00286999997;
        u_xlat22 = u_xlat22 * 1.44269502;
        u_xlat22 = exp2(u_xlat22);
        u_xlat22 = u_xlat22 * 0.25;
        u_xlat22 = u_xlat23 * 0.25 + (-u_xlat22);
        u_xlat22 = u_xlat16.x * u_xlat22 + u_xlat1.y;
        u_xlat22 = max(u_xlat22, 0.0);
        u_xlat22 = min(u_xlat22, 50.0);
        u_xlat5.xyz = u_xlat7.xyz * u_xlat2.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);
        u_xlat6.xyz = (-vec3(u_xlat22)) * u_xlat5.xyz;
        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
        u_xlat6.xyz = exp2(u_xlat6.xyz);
        u_xlat22 = u_xlat1.z * u_xlat16.x;
        u_xlat4.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat4.xyz;
        u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat1.x = sqrt(u_xlat1.x);
        u_xlat16.x = (-u_xlat1.x) + 1.0;
        u_xlat16.x = u_xlat16.x * 230.831207;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat23 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
        u_xlat23 = u_xlat23 / u_xlat1.x;
        u_xlat24 = dot(u_xlat3.xyz, u_xlat4.xyz);
        u_xlat1.x = u_xlat24 / u_xlat1.x;
        u_xlat23 = (-u_xlat23) + 1.0;
        u_xlat24 = u_xlat23 * 5.25 + -6.80000019;
        u_xlat24 = u_xlat23 * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat23 * u_xlat24 + 0.458999991;
        u_xlat23 = u_xlat23 * u_xlat24 + -0.00286999997;
        u_xlat23 = u_xlat23 * 1.44269502;
        u_xlat23 = exp2(u_xlat23);
        u_xlat1.x = (-u_xlat1.x) + 1.0;
        u_xlat24 = u_xlat1.x * 5.25 + -6.80000019;
        u_xlat24 = u_xlat1.x * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat1.x * u_xlat24 + 0.458999991;
        u_xlat1.x = u_xlat1.x * u_xlat24 + -0.00286999997;
        u_xlat1.x = u_xlat1.x * 1.44269502;
        u_xlat1.x = exp2(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * 0.25;
        u_xlat1.x = u_xlat23 * 0.25 + (-u_xlat1.x);
        u_xlat1.x = u_xlat16.x * u_xlat1.x + u_xlat1.y;
        u_xlat1.x = max(u_xlat1.x, 0.0);
        u_xlat1.x = min(u_xlat1.x, 50.0);
        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat1.xxx);
        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
        u_xlat4.xyz = exp2(u_xlat4.xyz);
        u_xlat1.x = u_xlat1.z * u_xlat16.x;
        u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
        u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat22) + u_xlat1.xyz;
        u_xlat4.xyz = u_xlat7.xyz * u_xlat2.xxx;
        u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz;
        u_xlat1.xyz = u_xlat1.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);
    } else {
        u_xlat22 = min(u_xlat3.y, -0.00100000005);
        u_xlat22 = -9.99999975e-05 / u_xlat22;
        u_xlat5.xyz = vec3(u_xlat22) * u_xlat3.xyz + vec3(0.0, 1.00010002, 0.0);
        u_xlat16.x = dot((-u_xlat3.xyz), u_xlat5.xyz);
        u_xlat16.y = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
        u_xlat16.xy = (-u_xlat16.xy) + vec2(1.0, 1.0);
        u_xlat24 = u_xlat16.x * 5.25 + -6.80000019;
        u_xlat24 = u_xlat16.x * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat16.x * u_xlat24 + 0.458999991;
        u_xlat16.x = u_xlat16.x * u_xlat24 + -0.00286999997;
        u_xlat16.x = u_xlat16.x * 1.44269502;
        u_xlat16.x = exp2(u_xlat16.x);
        u_xlat24 = u_xlat16.y * 5.25 + -6.80000019;
        u_xlat24 = u_xlat16.y * u_xlat24 + 3.82999992;
        u_xlat24 = u_xlat16.y * u_xlat24 + 0.458999991;
        u_xlat23 = u_xlat16.y * u_xlat24 + -0.00286999997;
        u_xlat23 = u_xlat23 * 1.44269502;
        u_xlat23 = exp2(u_xlat23);
        u_xlat5.xy = u_xlat16.xx * vec2(0.25, 0.249900013);
        u_xlat16.x = u_xlat23 * 0.25 + u_xlat5.x;
        u_xlat5.xz = vec2(u_xlat22) * vec2(0.5, 20.0);
        u_xlat6.xyz = u_xlat3.xyz * u_xlat5.xxx;
        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);
        u_xlat22 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat22 = sqrt(u_xlat22);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat22 = u_xlat22 * 230.831207;
        u_xlat22 = exp2(u_xlat22);
        u_xlat16.x = u_xlat22 * u_xlat16.x + (-u_xlat5.y);
        u_xlat16.x = max(u_xlat16.x, 0.0);
        u_xlat16.x = min(u_xlat16.x, 50.0);
        u_xlat5.xyw = u_xlat7.xyz * u_xlat2.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);
        u_xlat9.xyz = (-u_xlat16.xxx) * u_xlat5.xyw;
        u_xlat9.xyz = u_xlat9.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
        u_xlat1.xyz = exp2(u_xlat9.xyz);
        u_xlat22 = u_xlat5.z * u_xlat22;
        u_xlat9.xyz = vec3(u_xlat22) * u_xlat1.xyz;
        u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);
        u_xlat4.xyz = u_xlat7.xyz * u_xlat9.xyz;
    }
    u_xlat7.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * u_xlat1.xyz + u_xlat4.xyz;
    vs_TEXCOORD1.xyz = u_xlat7.xyz * vec3(_Exposure);
    u_xlat7.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat3.xyz));
    u_xlat7.x = u_xlat7.x * u_xlat7.x;
    u_xlat7.x = u_xlat7.x * 0.75 + 0.75;
    u_xlat7.xyz = u_xlat7.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.xyz = u_xlat7.xyz * vec3(_Exposure);
    u_xlat7.x = dot(_LightColor0.xyz, _LightColor0.xyz);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.25);
    u_xlat7.x = min(u_xlat7.x, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * vec3(8000.0, 8000.0, 8000.0);
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(27.0, 27.0, 27.0);
    vs_TEXCOORD3.xyz = u_xlat1.xyz / u_xlat7.xxx;
    vs_TEXCOORD0.xyz = (-u_xlat3.xyz);
    vs_BLENDINDICES0 = u_xlatu0;
    gl_Layer = int(u_xlatu0);
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Skybox/Procedural:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Skybox/Procedural' failed.
-------- Shader Legacy Shaders/Particles/Alpha Blended Premultiply compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 _MainTex_ST;
UNITY_BINDING(0) uniform UnityStereoGlobals {
	vec4 hlslcc_mtx4x4unity_StereoMatrixP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixVP[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraInvProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoWorldToCamera[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraToWorld[8];
	vec3 unity_StereoWorldSpaceCameraPos[2];
	vec4 unity_StereoScaleOffset[2];
};
in  vec4 in_POSITION0;
in  vec4 in_COLOR0;
in  vec2 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
flat out uint vs_BLENDINDICES0;
vec4 u_xlat0;
uint u_xlatu1;
vec4 u_xlat2;
int u_xlati4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlatu1 = uint(gl_InstanceID) & 1u;
    u_xlati4 = int(u_xlatu1) << 2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 1)];
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[u_xlati4] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 2)] * u_xlat0.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati4 + 3)] * u_xlat0.wwww + u_xlat2;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_BLENDINDICES0 = u_xlatu1;
    gl_Layer = int(u_xlatu1);
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Legacy Shaders/Particles/Alpha Blended Premultiply:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Legacy Shaders/Particles/Alpha Blended Premultiply' failed.
-------- Shader Hidden/Universal Render Pipeline/Blit compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScaleBias;
out vec2 vs_TEXCOORD0;
flat out uint vs_BLENDINDICES0;
int u_xlati0;
uvec2 u_xlatu0;
vec3 u_xlat1;
int u_xlati4;
void main()
{
    u_xlati0 = int(uint(gl_VertexID) & 1u);
    u_xlatu0.y = uint(gl_VertexID) >> 1u;
    u_xlati4 = (-u_xlati0) + (-int(u_xlatu0.y));
    u_xlati0 = u_xlati0 + int(u_xlatu0.y);
    u_xlatu0.x = uint(u_xlati0) & 1u;
    u_xlat1.xz = vec2(u_xlatu0.yx);
    vs_TEXCOORD0.xy = u_xlat1.xz * _ScaleBias.xy + _ScaleBias.zw;
    u_xlati0 = u_xlati4 + 1;
    u_xlatu0.x = uint(u_xlati0) & 1u;
    u_xlat1.y = float(u_xlatu0.x);
    gl_Position.xy = u_xlat1.xy * vec2(2.0, -2.0) + vec2(-1.0, 1.0);
    gl_Position.zw = vec2(-1.0, 1.0);
    u_xlatu0.x = uint(gl_InstanceID) & 1u;
    gl_Layer = int(u_xlatu0.x);
    vs_BLENDINDICES0 = u_xlatu0.x;
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Hidden/Universal Render Pipeline/Blit:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Hidden/Universal Render Pipeline/Blit' failed.
-------- Shader Hidden/Universal Render Pipeline/CopyDepth compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScaleBiasRt;
out vec2 vs_TEXCOORD0;
flat out uint vs_BLENDINDICES0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
vec3 u_xlat1;
int u_xlati4;
void main()
{
    u_xlati0 = int(uint(gl_VertexID) & 1u);
    u_xlatu0.y = uint(gl_VertexID) >> 1u;
    u_xlati4 = (-u_xlati0) + (-int(u_xlatu0.y));
    u_xlati0 = u_xlati0 + int(u_xlatu0.y);
    u_xlatu0.x = uint(u_xlati0) & 1u;
    u_xlat1.xz = vec2(u_xlatu0.yx);
    vs_TEXCOORD0.xy = u_xlat1.xz;
    u_xlati0 = u_xlati4 + 1;
    u_xlatu0.x = uint(u_xlati0) & 1u;
    u_xlat1.y = float(u_xlatu0.x);
    u_xlat0.xy = u_xlat1.xy * vec2(2.0, -2.0) + vec2(-1.0, 1.0);
    gl_Position.y = u_xlat0.y * _ScaleBiasRt.x;
    gl_Position.x = u_xlat0.x;
    gl_Position.zw = vec2(-1.0, 1.0);
    u_xlatu0.x = uint(gl_InstanceID) & 1u;
    gl_Layer = int(u_xlatu0.x);
    vs_BLENDINDICES0 = u_xlatu0.x;
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Hidden/Universal Render Pipeline/CopyDepth:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Hidden/Universal Render Pipeline/CopyDepth' failed.
-------- Shader Universal Render Pipeline/Terrain/Lit compilation failed
#version 150
#extension GL_ARB_explicit_attrib_location : require
#ifdef GL_ARB_shader_bit_encoding
#extension GL_ARB_shader_bit_encoding : enable
#endif
#extension GL_AMD_vertex_shader_layer : require
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 0
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 unity_OrthoParams;
UNITY_BINDING(0) uniform UnityPerDraw {
	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
	vec4 unity_LODFade;
	vec4 unity_WorldTransformParams;
	vec4 unity_LightData;
	vec4 unity_LightIndices[2];
	vec4 unity_ProbesOcclusion;
	vec4 unity_SpecCube0_HDR;
	vec4 unity_LightmapST;
	vec4 unity_DynamicLightmapST;
	vec4 unity_SHAr;
	vec4 unity_SHAg;
	vec4 unity_SHAb;
	vec4 unity_SHBr;
	vec4 unity_SHBg;
	vec4 unity_SHBb;
	vec4 unity_SHC;
};
UNITY_BINDING(1) uniform UnityStereoViewBuffer {
	vec4 hlslcc_mtx4x4unity_StereoMatrixP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvV[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixVP[8];
	vec4 hlslcc_mtx4x4unity_StereoMatrixInvVP[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraProjection[8];
	vec4 hlslcc_mtx4x4unity_StereoCameraInvProjection[8];
	vec3 unity_StereoWorldSpaceCameraPos[2];
	vec4 unity_StereoScaleOffset[2];
};
UNITY_BINDING(2) uniform _Terrain {
	float _NormalScale0;
	float _NormalScale1;
	float _NormalScale2;
	float _NormalScale3;
	float _Metallic0;
	float _Metallic1;
	float _Metallic2;
	float _Metallic3;
	float _Smoothness0;
	float _Smoothness1;
	float _Smoothness2;
	float _Smoothness3;
	vec4 _DiffuseRemapScale0;
	vec4 _DiffuseRemapScale1;
	vec4 _DiffuseRemapScale2;
	vec4 _DiffuseRemapScale3;
	vec4 _MaskMapRemapOffset0;
	vec4 _MaskMapRemapOffset1;
	vec4 _MaskMapRemapOffset2;
	vec4 _MaskMapRemapOffset3;
	vec4 _MaskMapRemapScale0;
	vec4 _MaskMapRemapScale1;
	vec4 _MaskMapRemapScale2;
	vec4 _MaskMapRemapScale3;
	vec4 _Control_ST;
	vec4 _Control_TexelSize;
	float _DiffuseHasAlpha0;
	float _DiffuseHasAlpha1;
	float _DiffuseHasAlpha2;
	float _DiffuseHasAlpha3;
	float _LayerHasMask0;
	float _LayerHasMask1;
	float _LayerHasMask2;
	float _LayerHasMask3;
	vec4 _Splat0_ST;
	vec4 _Splat1_ST;
	vec4 _Splat2_ST;
	vec4 _Splat3_ST;
	float _HeightTransition;
	float _NumLayersCount;
};
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
out vec4 vs_TEXCOORD0;
out vec4 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
out vec4 vs_TEXCOORD6;
out vec3 vs_TEXCOORD7;
flat out uint vs_BLENDINDICES0;
uint u_xlatu0;
vec4 u_xlat1;
int u_xlati1;
vec4 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
bool u_xlatb6;
float u_xlat16;
void main()
{
    u_xlatu0 = uint(gl_InstanceID) & 1u;
    u_xlat5.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat5.xyz;
    u_xlat5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlati1 = int(u_xlatu0) << 2;
    u_xlat2 = u_xlat5.yyyy * hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati1 + 1)];
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[u_xlati1] * u_xlat5.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati1 + 2)] * u_xlat5.zzzz + u_xlat2;
    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_StereoMatrixVP[(u_xlati1 + 3)];
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * unity_LightmapST.xy + unity_LightmapST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
    vs_TEXCOORD2.zw = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
    u_xlatb6 = unity_OrthoParams.w==0.0;
    if(u_xlatb6){
        vs_TEXCOORD4.xyz = (-u_xlat5.xyz) + unity_StereoWorldSpaceCameraPos[int(u_xlatu0)].xyz;
    } else {
        vs_TEXCOORD4.x = hlslcc_mtx4x4unity_StereoMatrixV[u_xlati1].z;
        vs_TEXCOORD4.y = hlslcc_mtx4x4unity_StereoMatrixV[(u_xlati1 + 1)].z;
        vs_TEXCOORD4.z = hlslcc_mtx4x4unity_StereoMatrixV[(u_xlati1 + 2)].z;
    }
    u_xlat1.xyz = in_NORMAL0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_NORMAL0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_NORMAL0.zzz + u_xlat1.xyz;
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = max(u_xlat16, 1.17549435e-38);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    u_xlat1.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat1);
    u_xlat2.y = dot(unity_SHAg, u_xlat1);
    u_xlat2.z = dot(unity_SHAb, u_xlat1);
    u_xlat3 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat3);
    u_xlat4.y = dot(unity_SHBg, u_xlat3);
    u_xlat4.z = dot(unity_SHBb, u_xlat3);
    u_xlat16 = u_xlat1.y * u_xlat1.y;
    u_xlat16 = u_xlat1.x * u_xlat1.x + (-u_xlat16);
    u_xlat3.xyz = unity_SHC.xyz * vec3(u_xlat16) + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3.xyz = u_xlat1.xyz;
    vs_TEXCOORD7.xyz = u_xlat5.xyz;
    gl_Layer = int(u_xlatu0);
    vs_BLENDINDICES0 = u_xlatu0;
    return;
}
-------- failed compiling:
vertex shader
GLSL compilation failed for shader Universal Render Pipeline/Terrain/Lit:
ERROR: 0:6: '' :  extension 'GL_AMD_vertex_shader_layer' is not supported
Note: Creation of internal variant of shader 'Universal Render Pipeline/Terrain/Lit' failed.
Refreshing native plugins compatible for Editor in 1.55 ms, found 4 plugins.
Preloading 1 native plugins for Editor in 0.72 ms.
Unloading 3928 Unused Serialized files (Serialized files now loaded: 0)
System memory in use before: 316.7 MB.
System memory in use after: 316.8 MB.

Unloading 171 unused Assets to reduce memory usage. Loaded Objects now: 4433.
Total: 6.908463 ms (FindLiveObjects: 0.466986 ms CreateObjectMapping: 0.249736 ms MarkObjects: 5.892713 ms  DeleteObjects: 0.297310 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:framework-osx-AVFoundation: b23960f63f64bdc6ff669e2cdcee2391 -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
========================================================================
Received Import Request.
  path: Assets/ProBuilder Data/Default Color Palette.asset
  artifactKey: Guid(ffa427c2f331740778eb500ee900b197) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/ProBuilder Data/Default Color Palette.asset using Guid(ffa427c2f331740778eb500ee900b197) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '470f511624b2e13c486589e0baadecf3') in 0.204200 seconds 
